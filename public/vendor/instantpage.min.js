(() => {
  // <stdin>
  var _allowQueryString;
  var _allowExternalLinks;
  var _useWhitelist;
  var _lastTouchTimestamp;
  var _mouseoverTimer;
  var _chromiumMajorVersionInUserAgent = null;
  var _delayOnHover = 65;
  var _preloadedList = /* @__PURE__ */ new Set();
  function init() {
    if (!document.createElement("link").relList.supports("prefetch")) return;
    const e = "instantVaryAccept" in document.body.dataset || "Shopify" in window, t = navigator.userAgent.indexOf("Chrome/");
    if (t > -1 && (_chromiumMajorVersionInUserAgent = parseInt(navigator.userAgent.substring(t + "Chrome/".length))), e && _chromiumMajorVersionInUserAgent && _chromiumMajorVersionInUserAgent < 110) return;
    const n = "instantMousedownShortcut" in document.body.dataset;
    _allowQueryString = "instantAllowQueryString" in document.body.dataset, _allowExternalLinks = "instantAllowExternalLinks" in document.body.dataset, _useWhitelist = "instantWhitelist" in document.body.dataset;
    const o = { capture: true, passive: true };
    let i = false, r = false, s = false;
    if ("instantIntensity" in document.body.dataset) {
      const e2 = document.body.dataset.instantIntensity;
      if (e2.startsWith("mousedown")) i = true, "mousedown-only" == e2 && (r = true);
      else if (e2.startsWith("viewport")) {
        const t2 = navigator.connection && navigator.connection.saveData, n2 = navigator.connection && navigator.connection.effectiveType && navigator.connection.effectiveType.includes("2g");
        t2 || n2 || ("viewport" == e2 ? document.documentElement.clientWidth * document.documentElement.clientHeight < 45e4 && (s = true) : "viewport-all" == e2 && (s = true));
      } else {
        const t2 = parseInt(e2);
        isNaN(t2) || (_delayOnHover = t2);
      }
    }
    if (r || document.addEventListener("touchstart", touchstartListener, o), i ? n || document.addEventListener("mousedown", mousedownListener, o) : document.addEventListener("mouseover", mouseoverListener, o), n && document.addEventListener("mousedown", mousedownShortcutListener, o), s) {
      let e2 = window.requestIdleCallback;
      e2 || (e2 = (e3) => {
        e3();
      }), e2((function() {
        const e3 = new IntersectionObserver(((t2) => {
          t2.forEach(((t3) => {
            if (t3.isIntersecting) {
              const n2 = t3.target;
              e3.unobserve(n2), preload(n2.href);
            }
          }));
        }));
        document.querySelectorAll("a").forEach(((t2) => {
          isPreloadable(t2) && e3.observe(t2);
        }));
      }), { timeout: 1500 });
    }
  }
  function touchstartListener(e) {
    _lastTouchTimestamp = performance.now();
    const t = e.target.closest("a");
    isPreloadable(t) && preload(t.href, "high");
  }
  function mouseoverListener(e) {
    if (performance.now() - _lastTouchTimestamp < 1111) return;
    if (!("closest" in e.target)) return;
    const t = e.target.closest("a");
    isPreloadable(t) && (t.addEventListener("mouseout", mouseoutListener, { passive: true }), _mouseoverTimer = setTimeout((() => {
      preload(t.href, "high"), _mouseoverTimer = void 0;
    }), _delayOnHover));
  }
  function mousedownListener(e) {
    const t = e.target.closest("a");
    isPreloadable(t) && preload(t.href, "high");
  }
  function mouseoutListener(e) {
    e.relatedTarget && e.target.closest("a") == e.relatedTarget.closest("a") || _mouseoverTimer && (clearTimeout(_mouseoverTimer), _mouseoverTimer = void 0);
  }
  function mousedownShortcutListener(e) {
    if (performance.now() - _lastTouchTimestamp < 1111) return;
    const t = e.target.closest("a");
    if (e.which > 1 || e.metaKey || e.ctrlKey) return;
    if (!t) return;
    t.addEventListener("click", (function(e2) {
      1337 != e2.detail && e2.preventDefault();
    }), { capture: true, passive: false, once: true });
    const n = new MouseEvent("click", { view: window, bubbles: true, cancelable: false, detail: 1337 });
    t.dispatchEvent(n);
  }
  function isPreloadable(e) {
    if (e && e.href && (!_useWhitelist || "instant" in e.dataset)) {
      if (e.origin != location.origin) {
        if (!(_allowExternalLinks || "instant" in e.dataset) || !_chromiumMajorVersionInUserAgent) return;
      }
      if (["http:", "https:"].includes(e.protocol) && ("http:" != e.protocol || "https:" != location.protocol) && (_allowQueryString || !e.search || "instant" in e.dataset) && !(e.hash && e.pathname + e.search == location.pathname + location.search || "noInstant" in e.dataset)) return true;
    }
  }
  function preload(e, t = "auto") {
    if (_preloadedList.has(e)) return;
    const n = document.createElement("link");
    n.rel = "prefetch", n.href = e, n.fetchPriority = t, n.as = "document", document.head.appendChild(n), _preloadedList.add(e);
  }
  init();
})();
/*! instant.page v5.2.0 - (C) 2019-2023 Alexandre Dieulot - https://instant.page/license */
